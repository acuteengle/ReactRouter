{"version":3,"sources":["Navigation.jsx","pages/Home.jsx","pages/About.jsx","pages/Topics.jsx","pages/Action.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","Navbar","bg","variant","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","Home","About","Topics","Action","actionId","useParams","App","basename","process","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAyDeA,EA3CI,SAACC,GAClB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,mBAGA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,KAAvB,QAGA,kBAACK,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,UAAvB,SAGA,kBAACK,EAAA,EAAIN,KAAL,CAAUD,GAAIC,IAAMC,GAAG,WAAvB,UAGA,kBAACO,EAAA,EAAD,CAAaC,MAAM,WAAWJ,GAAG,sBAC/B,kBAACG,EAAA,EAAYE,KAAb,CAAkBX,GAAIC,IAAMC,GAAG,aAA/B,YAGA,kBAACO,EAAA,EAAYE,KAAb,CAAkBX,GAAIC,IAAMC,GAAG,aAA/B,YAGA,kBAACO,EAAA,EAAYE,KAAb,CAAkBX,GAAIC,IAAMC,GAAG,aAA/B,YAGA,kBAACO,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBX,GAAIC,IAAMC,GAAG,aAA/B,oBAKJ,kBAACW,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAAST,UAAU,YACxD,kBAACU,EAAA,EAAD,CAAQrB,QAAQ,mBAAhB,cCxCKsB,EARF,WACX,OACE,yBAAKX,UAAU,OACb,sCCKSY,EARD,WACZ,OACE,yBAAKZ,UAAU,OACb,uCCKSa,EARA,WACb,OACE,yBAAKb,UAAU,OACb,wCCQSc,EAVA,WAAO,IACdC,EAAaC,cAAbD,SAEN,OACE,yBAAKf,UAAU,OACb,uCAAae,KCoBJE,MAjBf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAUC,4BACvB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,SAASC,UAAWV,IAChC,kBAAC,IAAD,CAAOS,KAAK,UAAUC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,oBAAoBC,UAAWR,IAC3C,kBAAC,IAAD,CAAOS,OAAQ,WACb,OAAO,8CCTGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d761fb4.chunk.js","sourcesContent":["import React from \"react\";\n// https://react-bootstrap.github.io/getting-started/introduction/\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Navbar,\n  Nav,\n  NavDropdown,\n  Form,\n  FormControl,\n  Button,\n} from \"react-bootstrap\";\n// https://stackoverflow.com/questions/54843302/reactjs-bootstrap-navbar-and-routing-not-working-together\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = (props) => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand as={Link} to=\"/\">\n        React-Bootstrap\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={Link} to=\"/\">\n            Home\n          </Nav.Link>\n          <Nav.Link as={Link} to=\"/about\">\n            About\n          </Nav.Link>\n          <Nav.Link as={Link} to=\"/topics\">\n            Topics\n          </Nav.Link>\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item as={Link} to=\"/action/1\">\n              Action 1\n            </NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/action/2\">\n              Action 2\n            </NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/action/3\">\n              Action 3\n            </NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item as={Link} to=\"/action/4\">\n              Separated link\n            </NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-success\">Search</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nconst Home = () => {\n  return (\n    <div className=\"App\">\n      <h1>Home</h1>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst About = () => {\n  return (\n    <div className=\"App\">\n      <h1>About</h1>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\n\nconst Topics = () => {\n  return (\n    <div className=\"App\">\n      <h1>Topics</h1>\n    </div>\n  );\n};\n\nexport default Topics;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Action = () => {\n  let { actionId } = useParams();\n\n  return (\n    <div className=\"App\">\n      <h1>Action: {actionId}</h1>\n    </div>\n  );\n};\n\nexport default Action;\n","import React from 'react';\n//https://reactrouter.com/web/guides/quick-start\n//https://stackoverflow.com/questions/54843302/reactjs-bootstrap-navbar-and-routing-not-working-together\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Navigation from './Navigation';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Topics from './pages/Topics';\nimport Action from './pages/Action';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Navigation />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/topics\" component={Topics} />\n        <Route path=\"/action/:actionId\" component={Action} />\n        <Route render={() => {\n          return <p>Not found</p>\n        }} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}